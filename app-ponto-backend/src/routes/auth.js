const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const Usuario = require('../models/Usuario');

// Gerar token JWT
const gerarToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET || 'chave-secreta-padrao', {
    expiresIn: '7d' // Token v√°lido por 7 dias
  });
};

// üìù CADASTRAR USU√ÅRIO
router.post('/cadastrar', async (req, res) => {
  try {
    const { nome, sobrenome, cpf, email, senha, empresa, cargo } = req.body;

    console.log('üìù Tentativa de cadastro para:', email);

    // Valida√ß√µes b√°sicas
    if (!nome || !sobrenome || !cpf || !email || !senha) {
      return res.status(400).json({
        success: false,
        message: 'Todos os campos obrigat√≥rios devem ser preenchidos'
      });
    }

    // Limpar CPF (remover formata√ß√£o)
    const cpfLimpo = cpf.replace(/\D/g, '');

    // Validar CPF
    if (!Usuario.validarCPF(cpfLimpo)) {
      return res.status(400).json({
        success: false,
        message: 'CPF inv√°lido'
      });
    }

    // Verificar se usu√°rio j√° existe (CPF)
    const usuarioCPFExistente = await Usuario.buscarPorCPF(cpfLimpo);
    if (usuarioCPFExistente) {
      return res.status(400).json({
        success: false,
        message: 'CPF j√° cadastrado no sistema'
      });
    }

    // Verificar se usu√°rio j√° existe (Email)
    const usuarioEmailExistente = await Usuario.buscarPorEmail(email);
    if (usuarioEmailExistente) {
      return res.status(400).json({
        success: false,
        message: 'Email j√° cadastrado no sistema'
      });
    }

    // Criar novo usu√°rio
    const novoUsuario = new Usuario({
      nome: nome.trim(),
      sobrenome: sobrenome.trim(),
      cpf: cpfLimpo,
      email: email.toLowerCase().trim(),
      senha,
      empresa: empresa || 'BMZ Advogados',
      cargo: cargo || 'Funcion√°rio'
    });

    await novoUsuario.save();

    console.log('‚úÖ Usu√°rio cadastrado com sucesso:', novoUsuario.email);

    res.status(201).json({
      success: true,
      message: 'Usu√°rio cadastrado com sucesso!',
      usuario: novoUsuario.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Erro no cadastro:', error);
    
    // Tratamento de erros espec√≠ficos do MongoDB
    if (error.code === 11000) {
      const campo = Object.keys(error.keyValue)[0];
      const valor = error.keyValue[campo];
      
      return res.status(400).json({
        success: false,
        message: `${campo === 'cpf' ? 'CPF' : 'Email'} j√° cadastrado: ${valor}`
      });
    }

    if (error.name === 'ValidationError') {
      const erros = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos',
        erros
      });
    }

    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// üîê LOGIN
router.post('/login', async (req, res) => {
  try {
    const { cpf, senha } = req.body;

    console.log('üîê Tentativa de login para CPF:', cpf.replace(/\d(?=\d{4})/g, '*'));

    // Valida√ß√µes b√°sicas
    if (!cpf || !senha) {
      return res.status(400).json({
        success: false,
        message: 'CPF e senha s√£o obrigat√≥rios'
      });
    }

    // Limpar CPF
    const cpfLimpo = cpf.replace(/\D/g, '');

    // Buscar usu√°rio por CPF
    const usuario = await Usuario.buscarPorCPF(cpfLimpo);
    if (!usuario) {
      return res.status(401).json({
        success: false,
        message: 'CPF n√£o encontrado'
      });
    }

    // Verificar se usu√°rio est√° ativo
    if (!usuario.ativo) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio desativado'
      });
    }

    // Verificar senha
    const senhaValida = await usuario.compararSenha(senha);
    if (!senhaValida) {
      return res.status(401).json({
        success: false,
        message: 'Senha incorreta'
      });
    }

    // Gerar token
    const token = gerarToken(usuario._id);

    console.log('‚úÖ Login realizado com sucesso para:', usuario.email);

    res.json({
      success: true,
      message: 'Login realizado com sucesso!',
      token,
      usuario: usuario.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// üîç VERIFICAR TOKEN
router.get('/verificar', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }

    // Verificar e decodificar token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'chave-secreta-padrao');
    
    // Buscar usu√°rio
    const usuario = await Usuario.findById(decoded.id).select('-senha');
    
    if (!usuario) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    if (!usuario.ativo) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio desativado'
      });
    }

    console.log('‚úÖ Token verificado para:', usuario.email);

    res.json({
      success: true,
      message: 'Token v√°lido',
      usuario: usuario.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o do token:', error);
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }

    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: 'Token expirado'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// üö™ LOGOUT (opcional - apenas limpa o token no cliente)
router.post('/logout', (req, res) => {
  console.log('üö™ Logout solicitado');
  
  res.json({
    success: true,
    message: 'Logout realizado com sucesso'
  });
});

// üë§ ATUALIZAR PERFIL
router.put('/perfil', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }

    // Verificar e decodificar token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'chave-secreta-padrao');
    const usuario = await Usuario.findById(decoded.id);
    
    if (!usuario) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    const { nome, sobrenome, email } = req.body;

    console.log('üë§ Atualizando perfil para:', usuario.email);

    // Valida√ß√µes b√°sicas
    if (!nome || !sobrenome || !email) {
      return res.status(400).json({
        success: false,
        message: 'Nome, sobrenome e email s√£o obrigat√≥rios'
      });
    }

    // Verificar se o novo email j√° existe (se foi alterado)
    if (email.toLowerCase() !== usuario.email.toLowerCase()) {
      const emailExistente = await Usuario.buscarPorEmail(email);
      if (emailExistente) {
        return res.status(400).json({
          success: false,
          message: 'Este email j√° est√° sendo usado por outro usu√°rio'
        });
      }
    }

    // Atualizar dados do usu√°rio
    usuario.nome = nome.trim();
    usuario.sobrenome = sobrenome.trim();
    usuario.email = email.toLowerCase().trim();
    usuario.atualizadoEm = new Date();

    await usuario.save();

    console.log('‚úÖ Perfil atualizado com sucesso para:', usuario.email);

    res.json({
      success: true,
      message: 'Perfil atualizado com sucesso!',
      usuario: usuario.toJSON()
    });

  } catch (error) {
    console.error('‚ùå Erro ao atualizar perfil:', error);
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }

    if (error.name === 'ValidationError') {
      const erros = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos',
        erros
      });
    }

    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// üîí ALTERAR SENHA
router.put('/senha', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }

    // Verificar e decodificar token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'chave-secreta-padrao');
    const usuario = await Usuario.findById(decoded.id);
    
    if (!usuario) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    const { senhaAtual, novaSenha } = req.body;

    console.log('üîí Alterando senha para:', usuario.email);

    // Valida√ß√µes b√°sicas
    if (!senhaAtual || !novaSenha) {
      return res.status(400).json({
        success: false,
        message: 'Senha atual e nova senha s√£o obrigat√≥rias'
      });
    }

    if (novaSenha.length < 6) {
      return res.status(400).json({
        success: false,
        message: 'A nova senha deve ter pelo menos 6 caracteres'
      });
    }

    // Verificar senha atual
    const senhaAtualValida = await usuario.compararSenha(senhaAtual);
    if (!senhaAtualValida) {
      return res.status(400).json({
        success: false,
        message: 'Senha atual incorreta'
      });
    }

    // Verificar se a nova senha √© diferente da atual
    const novaSenhaIgualAtual = await usuario.compararSenha(novaSenha);
    if (novaSenhaIgualAtual) {
      return res.status(400).json({
        success: false,
        message: 'A nova senha deve ser diferente da senha atual'
      });
    }

    // Atualizar senha
    usuario.senha = novaSenha; // O middleware do schema far√° o hash automaticamente
    usuario.atualizadoEm = new Date();

    await usuario.save();

    console.log('‚úÖ Senha alterada com sucesso para:', usuario.email);

    res.json({
      success: true,
      message: 'Senha alterada com sucesso!'
    });

  } catch (error) {
    console.error('‚ùå Erro ao alterar senha:', error);
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// üìä OBTER ESTAT√çSTICAS DO USU√ÅRIO
router.get('/estatisticas', async (req, res) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'chave-secreta-padrao');
    const usuario = await Usuario.findById(decoded.id);
    
    if (!usuario) {
      return res.status(401).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    // Calcular estat√≠sticas dos √∫ltimos 30 dias
    const dataInicio = new Date();
    dataInicio.setDate(dataInicio.getDate() - 30);
    
    const dataFim = new Date();

    // Buscar estat√≠sticas usando o m√©todo do model Ponto
    const Ponto = require('../models/Ponto');
    const estatisticas = await Ponto.obterEstatisticasUsuario(usuario._id, dataInicio, dataFim);

    res.json({
      success: true,
      estatisticas: {
        ...estatisticas,
        periodo: {
          inicio: dataInicio.toISOString(),
          fim: dataFim.toISOString(),
          dias: 30
        },
        usuario: {
          nome: usuario.nome,
          empresa: usuario.empresa,
          criadoEm: usuario.criadoEm
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Erro ao obter estat√≠sticas'
    });
  }
});

module.exports = router;