// services/NotificationService.js - VERS√ÉO COMPLETA CORRIGIDA
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import ApiService from './api'; // ‚úÖ CORRIGIDO: Importa√ß√£o da API

// Configura√ß√£o das notifica√ß√µes
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

class NotificationService {
  
  // Inicializar o servi√ßo de notifica√ß√µes
  async initialize() {
    try {
      console.log('üîî Inicializando notifica√ß√µes de ajustes...');
      
      // Solicitar permiss√µes
      const permission = await this.requestPermissions();
      if (!permission) {
        console.log('‚ùå Permiss√£o de notifica√ß√£o negada');
        return false;
      }

      // Configurar listeners
      this.setupNotificationListeners();

      console.log('‚úÖ Notifica√ß√µes de ajustes inicializadas');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro ao inicializar notifica√ß√µes:', error);
      return false;
    }
  }

  // Solicitar permiss√µes
  async requestPermissions() {
    try {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.log('üö´ Permiss√£o de notifica√ß√£o negada pelo usu√°rio');
        return false;
      }

      // Configura√ß√µes espec√≠ficas do Android
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('default', {
          name: 'Ajustes de Ponto BMZ',
          importance: Notifications.AndroidImportance.HIGH,
          vibrationPattern: [0, 250, 250, 250],
          lightColor: '#1e5f74',
          sound: 'default',
        });
      }

      return true;
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√µes:', error);
      return false;
    }
  }

  // Configurar listeners de notifica√ß√µes
  setupNotificationListeners() {
    // Listener para quando app est√° aberto
    Notifications.addNotificationReceivedListener(notification => {
      console.log('üì¨ Notifica√ß√£o de ajuste recebida:', notification);
    });

    // ‚úÖ MELHORADO: Listener para quando usu√°rio toca na notifica√ß√£o
    Notifications.addNotificationResponseReceivedListener(response => {
      console.log('üëÜ Notifica√ß√£o de ajuste tocada:', response);
      
      // Navegar para hist√≥rico se for notifica√ß√£o de ajuste
      if (response.notification.request.content.data?.type === 'ajuste_status') {
        console.log('üì± Redirecionando para hist√≥rico...');
        // TODO: Implementar navega√ß√£o quando necess√°rio
        // router.push('/history');
      }
    });
  }

  // ==================== NOTIFICA√á√ÉO DE AJUSTES ====================

  // Notificar sobre status de ajuste
  async notifyAjusteStatus(status, motivo, respostaRH) {
    try {
      const isAprovado = status === 'aprovado';
      
      const notification = {
        title: isAprovado ? '‚úÖ Ajuste Aprovado!' : '‚ùå Ajuste Rejeitado',
        body: isAprovado 
          ? `Seu ajuste de hor√°rio foi aprovado${respostaRH ? ': ' + respostaRH : ''}`
          : `Seu ajuste foi rejeitado${respostaRH ? ': ' + respostaRH : ''}`,
        data: {
          type: 'ajuste_status',
          status,
          motivo,
          respostaRH,
          timestamp: new Date().toISOString()
        },
        sound: 'default',
        priority: 'high'
      };

      await this.scheduleImmediateNotification(notification);
      console.log(`üîî Notifica√ß√£o de ajuste enviada: ${status}`);
      
    } catch (error) {
      console.error('‚ùå Erro ao notificar ajuste:', error);
    }
  }

  // ==================== AGENDAMENTO ====================

  // Agendar notifica√ß√£o imediata
  async scheduleImmediateNotification(notification) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: notification,
        trigger: null, // Imediatamente
      });
      
      console.log('üì§ Notifica√ß√£o enviada:', notification.title);
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
    }
  }

  // ==================== INTEGRA√á√ÉO COM API ====================

  // ‚úÖ CORRIGIDO: Verificar novos ajustes e notificar
  async checkAjustesStatus() {
    try {
      console.log('üîç Verificando status dos ajustes...');
      
      // ‚úÖ NOVO: Verificar se notifica√ß√µes est√£o ativadas nas configura√ß√µes
      const configs = await AsyncStorage.getItem('configuracoes');
      if (configs) {
        const configObj = JSON.parse(configs);
        if (!configObj.notificacoes) {
          console.log('üîï Notifica√ß√µes desabilitadas nas configura√ß√µes');
          return;
        }
      }
      
      // Buscar √∫ltima verifica√ß√£o
      const ultimaVerificacao = await AsyncStorage.getItem('ultimaVerificacaoAjustes');
      const agora = new Date().toISOString();

      // ‚úÖ CORRIGIDO: Buscar ajustes atuais usando a API corretamente
      const response = await ApiService.buscarAjustes();
      
      // ‚úÖ MELHORADO: Tratamento de erro e verifica√ß√£o de dados
      if (response.success && response.ajustes) {
        // Verificar se ajustes √© array
        const ajustes = Array.isArray(response.ajustes) ? response.ajustes : [];
        
        // Verificar mudan√ßas desde √∫ltima verifica√ß√£o
        const ajustesAnteriores = await AsyncStorage.getItem('statusAjustesCache');
        const statusAnterior = ajustesAnteriores ? JSON.parse(ajustesAnteriores) : {};
        
        for (const ajuste of ajustes) {
          const ajusteId = ajuste.id || ajuste._id;
          const statusAtual = ajuste.status;
          const statusPrevio = statusAnterior[ajusteId];
          
          // Se houve mudan√ßa de status e n√£o √© mais pendente
          if (statusPrevio && statusPrevio !== statusAtual && statusAtual !== 'pendente') {
            console.log(`üîî Mudan√ßa detectada: ${statusPrevio} ‚Üí ${statusAtual}`);
            await this.notifyAjusteStatus(statusAtual, ajuste.motivo, ajuste.respostaMensagem);
          }
          
          // Atualizar cache de status
          statusAnterior[ajusteId] = statusAtual;
        }
        
        // Salvar cache atualizado
        await AsyncStorage.setItem('statusAjustesCache', JSON.stringify(statusAnterior));
        console.log(`‚úÖ ${ajustes.length} ajustes verificados`);
      } else {
        console.log('‚ö†Ô∏è Nenhum ajuste encontrado ou erro na resposta');
      }

      await AsyncStorage.setItem('ultimaVerificacaoAjustes', agora);
      console.log('‚úÖ Verifica√ß√£o de ajustes conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar ajustes:', error);
      // N√£o lan√ßar erro para n√£o quebrar outras funcionalidades
    }
  }

  // ==================== UTILIT√ÅRIOS ====================

  // Testar notifica√ß√£o
  async testNotification() {
    try {
      await this.scheduleImmediateNotification({
        title: 'üéâ BMZ Advogados Associados',
        body: 'Suas notifica√ß√µes est√£o funcionando corretamente!',
        data: { type: 'teste' }
      });
      console.log('Notifica√ß√£o eniviada...');
    } catch (error) {
      console.error('‚ùå Erro ao testar notifica√ß√£o:', error);
      throw error;
    }
  }

  // Verificar se as notifica√ß√µes est√£o habilitadas
  async areNotificationsEnabled() {
    try {
      const { status } = await Notifications.getPermissionsAsync();
      return status === 'granted';
    } catch (error) {
      console.error('‚ùå Erro ao verificar permiss√µes:', error);
      return false;
    }
  }

  // ‚úÖ NOVO: Verificar se est√£o habilitadas nas configura√ß√µes do app
  async areNotificationsEnabledInSettings() {
    try {
      const configs = await AsyncStorage.getItem('configuracoes');
      if (configs) {
        const configObj = JSON.parse(configs);
        return configObj.notificacoes === true;
      }
      return true; // padr√£o ativado
    } catch (error) {
      console.error('‚ùå Erro ao verificar configura√ß√µes:', error);
      return true;
    }
  }

  // ‚úÖ MELHORADO: Obter estat√≠sticas completas
  async getNotificationStats() {
    try {
      const systemEnabled = await this.areNotificationsEnabled();
      const settingsEnabled = await this.areNotificationsEnabledInSettings();
      const lastCheck = await AsyncStorage.getItem('ultimaVerificacaoAjustes');
      const cache = await AsyncStorage.getItem('statusAjustesCache');
      
      const ajustesMonitorados = cache ? Object.keys(JSON.parse(cache)).length : 0;

      return {
        systemEnabled,
        settingsEnabled,
        enabled: systemEnabled && settingsEnabled,
        lastCheck: lastCheck ? new Date(lastCheck).toLocaleString('pt-BR') : 'Nunca',
        ajustesMonitorados
      };
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return null;
    }
  }

  // ‚úÖ NOVO: Limpar cache de notifica√ß√µes
  async clearNotificationCache() {
    try {
      await AsyncStorage.multiRemove([
        'ultimaVerificacaoAjustes',
        'statusAjustesCache'
      ]);
      console.log('üßπ Cache de notifica√ß√µes limpo');
    } catch (error) {
      console.error('‚ùå Erro ao limpar cache:', error);
    }
  }

  // ‚úÖ NOVO: For√ßar verifica√ß√£o imediata
  async forceCheck() {
    console.log('üîÑ For√ßando verifica√ß√£o de ajustes...');
    await this.checkAjustesStatus();
  }
}

export default new NotificationService();